/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EXMEM)
{
    use alu_operate;
    use ex_output;
    use memory_operation;

    semantics
    {

        // Develop a multiplexer for the ALU src1 operand using a switch statement using the src1_sl
        // control signal provided by the IDEX pipeline register generated by the Instruction decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?
        //
        // In Assignment 5, there is only one input which is the src1 register file, rf, value and
        // this input is from the IDEX pipeline register

        switch(r_idex_src1_sl){           
            case ALU_SRC1_SEL_RF:
                s_src1_operand = r_idex_rf_src1;
                break;
            case ALU_SRC1_EXMEM_DF:
                s_src1_operand = r_exmem_alu_result;
                break;
            case ALU_SRC1_MEMWB_DF:
                s_src1_operand = s_wb_wrtdata;
                break;
            case ALU_SRC1_SEL_ZERO:
                s_src1_operand = 0;
                break;
            case ALU_SRC1_SEL_PC:
                s_src1_operand = r_idex_pc;
                break;
            default:
                break;
        }

        // Develop a multiplexer for the ALU src1 operand using a switch statement using the src1_sl
        // control signal provided by the IDEX pipeline register generated by the Instruction decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?
        //
        // In Assignment 5, there are two inputs to the source 2 operand mux, the src2 register, rf, value
        // and the immediate value.  Both of these inputs are from the IDEX pipeline register

        switch(r_idex_fwd2){
            case ALU_SRC2_EXMEM_DF:
                s_ex_fwd2_val = r_exmem_alu_result;
                break;
            case ALU_SRC2_MEMWB_DF:
                s_ex_fwd2_val = s_wb_wrtdata;
                break;
            case ALU_SRC2_SEL_RF:
                s_ex_fwd2_val = r_idex_rf_src2;
                break;
            default:
                s_ex_fwd2_val = DONT_CARE;
        break;

        }

        switch (r_idex_src2_sl) {
            case ALU_SRC2_SEL_IMM:
                s_src2_operand = r_idex_src2_imm;
                break;

            case ALU_SRC2_FWD:
                s_src2_operand = s_ex_fwd2_val;
                break;
    
            default:
                s_src2_operand = 0;
                break;
        }

        // s_ex_fwd2_val = r_idex_fwd2_val;



        // HALT instruction detection used for simulation purposes until the load/store instructions
        // have been implemented
        if (r_idex_halt == true)
        {
            codasip_info(INFO_GENERAL, "Halt instruction indicated");
//            codasip_store_exit_code(rf_xpr[GPR_RETVAL] & 0xFF);
            #pragma simulator
            {
                codasip_halt();
            }

        }

        // If not a halt operation, call ALU routine
        alu_operate();
        memory_operation();






        // Update the pipeline registers between the Execute (EX) and MEMORY (MEM) stages
        ex_output();
    };
};

event alu_operate : pipeline(pipe.EXMEM)
{
    semantics
    {
        // A switch statement will be used to determine and evaluate the ALU operation using
        // the aluop code provided by the IDEX pipeline register whose value is determined
        // by the instruction decoder.
        //
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to aluop to build the complete name of input from IDEX pipeline register for this switch 
        // statement?
        //
        // The value to assign in the case statements was added to ca_resources.codal earlier in
        // assignment 5

        switch(r_idex_aluop){
            case ALU_ADD:
                s_ex_alu_result = s_src1_operand + s_src2_operand;
                break;
            case ALU_SLT:
                s_ex_alu_result = ((int32) s_src1_operand < (int32) s_src2_operand ) ? 1 : 0;
                break;
            case ALU_SLTU:
                s_ex_alu_result = ((uint32) s_src1_operand < (uint32) s_src2_operand ) ? 1 : 0;
                break;
            case ALU_XOR:
                s_ex_alu_result = (s_src1_operand ^ s_src2_operand);
                break;
            case ALU_OR:
                s_ex_alu_result = (s_src1_operand | s_src2_operand);
                break;
            case ALU_AND:
                s_ex_alu_result = (s_src1_operand & s_src2_operand);
                break;
            case ALU_SUB:
                s_ex_alu_result = s_src1_operand - s_src2_operand;
                break;
            case ALU_SLL:
                s_ex_alu_result = s_src1_operand << (uint32) s_src2_operand;          
                break;
            case ALU_SRL:
                s_ex_alu_result = (uint32) s_src1_operand >> (uint5) s_src2_operand; 
                break;
            case ALU_SRA:
                s_ex_alu_result = (int32) s_src1_operand >>  (uint5) s_src2_operand;  
                break;

            case ALU_ENC:
                s_ex_ecc0 = s_src1_operand[0..0] ^ s_src1_operand[1..1] ^ s_src1_operand[3..3] ^ s_src1_operand[4..4] ^ s_src1_operand[6..6] ^ s_src1_operand[8..8] ^ s_src1_operand[10..10] ^ s_src1_operand[11..11] ^ s_src1_operand[13..13] ^ s_src1_operand[15..15];
                s_ex_ecc1 = s_src1_operand[0..0] ^ s_src1_operand[2..2] ^ s_src1_operand[3..3] ^ s_src1_operand[5..5] ^ s_src1_operand[6..6] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10] ^ s_src1_operand[12..12] ^ s_src1_operand[13..13];
                s_ex_ecc2 = s_src1_operand[1..1] ^ s_src1_operand[2..2] ^ s_src1_operand[3..3] ^ s_src1_operand[7..7] ^ s_src1_operand[8..8] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10] ^ s_src1_operand[14..14] ^ s_src1_operand[15..15];
                s_ex_ecc3 = s_src1_operand[4..4] ^ s_src1_operand[5..5] ^ s_src1_operand[6..6] ^ s_src1_operand[7..7] ^ s_src1_operand[8..8] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10];
                s_ex_ecc4 = s_src1_operand[11..11] ^ s_src1_operand[12..12] ^ s_src1_operand[13..13] ^ s_src1_operand[14..14] ^ s_src1_operand[15..15];
                s_ex_ecc5 = s_src1_operand[0..0] ^ s_src1_operand[1..1] ^ s_src1_operand[2..2] ^ s_src1_operand[3..3] ^ s_src1_operand[4..4] ^ s_src1_operand[5..5] ^ s_src1_operand[6..6] ^ 
                s_src1_operand[7..7] ^ s_src1_operand[8..8] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10] ^ s_src1_operand[11..11] ^ s_src1_operand[12..12] ^ s_src1_operand[13..13] ^ s_src1_operand[14..14] ^ s_src1_operand[15..15]^ s_ex_ecc0 ^ s_ex_ecc1 ^ s_ex_ecc2 ^ s_ex_ecc3 ^ s_ex_ecc4;
                s_ex_alu_result = s_ex_ecc5 :: s_ex_ecc4 :: s_ex_ecc3 :: s_ex_ecc2 :: s_ex_ecc1 :: s_ex_ecc0 :: s_src1_operand[15..15] :: s_src1_operand[14..14] :: s_src1_operand[13..13] :: s_src1_operand[12..12] :: s_src1_operand[11..11] :: 
                s_src1_operand[10..10] :: s_src1_operand[9..9] :: s_src1_operand[8..8] :: s_src1_operand[7..7] :: s_src1_operand[6..6] :: 
                s_src1_operand[5..5] :: s_src1_operand[4..4] :: s_src1_operand[3..3] :: s_src1_operand[2..2] :: s_src1_operand[1..1] :: s_src1_operand[0..0];
                break;


            case ALU_DEC:
                s_ex_ecc0 = s_src1_operand[0..0] ^ s_src1_operand[1..1] ^ s_src1_operand[3..3] ^ s_src1_operand[4..4] ^ s_src1_operand[6..6] ^ s_src1_operand[8..8] ^ s_src1_operand[10..10] ^ s_src1_operand[11..11] ^ s_src1_operand[13..13] ^ s_src1_operand[15..15] ^ s_src1_operand[16..16];
                s_ex_ecc1 = s_src1_operand[0..0] ^ s_src1_operand[2..2] ^ s_src1_operand[3..3] ^ s_src1_operand[5..5] ^ s_src1_operand[6..6] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10] ^ s_src1_operand[12..12] ^ s_src1_operand[13..13] ^ s_src1_operand[17..17];
                s_ex_ecc2 = s_src1_operand[1..1] ^ s_src1_operand[2..2] ^ s_src1_operand[3..3] ^ s_src1_operand[7..7] ^ s_src1_operand[8..8] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10] ^ s_src1_operand[14..14] ^ s_src1_operand[15..15] ^ s_src1_operand[18..18];
                s_ex_ecc3 = s_src1_operand[4..4] ^ s_src1_operand[5..5] ^ s_src1_operand[6..6] ^ s_src1_operand[7..7] ^ s_src1_operand[8..8] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10] ^ s_src1_operand[19..19];
                s_ex_ecc4 = s_src1_operand[11..11] ^ s_src1_operand[12..12] ^ s_src1_operand[13..13] ^ s_src1_operand[14..14] ^ s_src1_operand[15..15] ^ s_src1_operand[20..20];
                s_ex_ecc5 = s_src1_operand[0..0] ^ s_src1_operand[1..1] ^ s_src1_operand[2..2] ^ s_src1_operand[3..3] ^ s_src1_operand[4..4] ^ s_src1_operand[5..5] ^ s_src1_operand[6..6] ^ s_src1_operand[7..7] ^ s_src1_operand[8..8]  ^ s_src1_operand[9..9] ^ s_src1_operand[10..10] ^ s_src1_operand[11..11] ^ s_src1_operand[12..12] ^ s_src1_operand[13..13] ^ s_src1_operand[14..14] ^ s_src1_operand[15..15] ^ s_src1_operand[16..16] ^ s_src1_operand[17..17] ^ s_src1_operand[18..18] ^ s_src1_operand[19..19] ^ s_src1_operand[20..20] ^ s_src1_operand[21..21];
                s_ex_ecc =  s_ex_ecc5 :: s_ex_ecc4 :: s_ex_ecc3 :: s_ex_ecc2 :: s_ex_ecc1 :: s_ex_ecc0;

                switch(s_ex_ecc){
                    case 0:
                        s_ex_alu_result = s_src1_operand & 0xFFFF; 
                        break;
                    case 33:
                        s_ex_alu_result = (s_src1_operand & 0xFFFF) | 0x40000000; // p1
                        break;
                    case 34:
                        s_ex_alu_result = (s_src1_operand & 0xFFFF) | 0x40000000; // p2
                        break;
                    case 35:
                        s_ex_alu_result = ((s_src1_operand ^ 0x1) & 0xFFFF) | 0x40000000;
                        break;
                    case 36:
                        s_ex_alu_result = (s_src1_operand & 0xFFFF) | 0x40000000; // p4
                        break;
                    case 37:
                        s_ex_alu_result = ((s_src1_operand ^ 0x2) & 0xFFFF) | 0x40000000;
                        break;
                    case 38:
                        s_ex_alu_result = ((s_src1_operand ^ 0x4) & 0xFFFF) | 0x40000000;
                        break;
                    case 39:
                        s_ex_alu_result = ((s_src1_operand ^ 0x8) & 0xFFFF) | 0x40000000;
                        break;
                    case 40:
                        s_ex_alu_result = (s_src1_operand & 0xFFFF) | 0x40000000; // p8
                        break;
                    case 41:
                        s_ex_alu_result = ((s_src1_operand ^ 0x10) & 0xFFFF) | 0x40000000;
                        break;
                    case 42:
                        s_ex_alu_result = ((s_src1_operand ^ 0x20) & 0xFFFF) | 0x40000000;
                        break;
                    case 43:
                        s_ex_alu_result = ((s_src1_operand ^ 0x40) & 0xFFFF) | 0x40000000;
                        break;
                    case 44:
                        s_ex_alu_result = ((s_src1_operand ^ 0x80) & 0xFFFF) | 0x40000000;
                        break;
                    case 45:
                        s_ex_alu_result = ((s_src1_operand ^ 0x100) & 0xFFFF) | 0x40000000;
                        break;
                    case 46:
                        s_ex_alu_result = ((s_src1_operand ^ 0x200) & 0xFFFF) | 0x40000000;
                        break;
                    case 47:
                        s_ex_alu_result = ((s_src1_operand ^ 0x400) & 0xFFFF) | 0x40000000;
                        break;
                    case 48:
                        s_ex_alu_result = (s_src1_operand & 0xFFFF) | 0x40000000; // p16
                        break;
                    case 49:
                        s_ex_alu_result = ((s_src1_operand ^ 0x800) & 0xFFFF) | 0x40000000;
                        break;
                    case 50:
                        s_ex_alu_result = ((s_src1_operand ^ 0x1000) & 0xFFFF) | 0x40000000;
                        break;
                    case 51:
                        s_ex_alu_result = ((s_src1_operand ^ 0x2000) & 0xFFFF)| 0x40000000;
                        break;
                    case 52:
                        s_ex_alu_result = ((s_src1_operand ^ 0x4000) & 0xFFFF) | 0x40000000;
                        break;
                    case 53:
                        s_ex_alu_result = ((s_src1_operand ^ 0x8000) & 0xFFFF) | 0x40000000;
                        break;
                    case 32:
                        s_ex_alu_result = (s_src1_operand & 0xFFFF) | 0x40000000; // p32
                        break;
                    default:
                        s_ex_alu_result = 0x80000000;
                    break;
                }

                break;
                
            default:
                break;
        }

        

        switch(r_idex_jump_inst){
            case BRADD_ALU:
                s_ex_target_address = s_ex_alu_result;     
                break;
            case BRADD_ADDR:
                s_ex_target_address = r_idex_pc + r_idex_src2_imm;
                break;
            default:
                // s_ex_target_address = 0;
                break;
        }

        if(s_ex_alu_result == 0){
            s_ex_zero = true;
        }
        else{
            s_ex_zero = false;
        }

            
            
        switch(r_idex_rfwtsel){
            case WB_ALU:
                s_ex_target_result = s_ex_alu_result;
                break;              
            case WB_PC:
                s_ex_target_result = r_idex_pc + 4;
                break;              
            default:
                // s_ex_target_result = 0;
                break;
            }
    };
};

event memory_operation : pipeline(pipe.EXMEM)
{
    
    semantics
    {
        uint1 op_rw ;
        uint2 op_type ;

        switch (r_idex_mem_ops)
       {
        case MEM_LB:
            op_rw = CP_AHB_READ;
            op_type = CP_AHB_NONSEQ;
            s_ex_mem_size = CP_AHB_SIZE_8;
            break;
        case MEM_LH:
            op_rw = CP_AHB_READ;
            op_type = CP_AHB_NONSEQ;
            s_ex_mem_size = CP_AHB_SIZE_16;
            break;
        case MEM_LW:
            op_rw = CP_AHB_READ;
            op_type = CP_AHB_NONSEQ;
            s_ex_mem_size = CP_AHB_SIZE_32;
            break;
        case MEM_LBU:
            op_rw = CP_AHB_READ;
            op_type = CP_AHB_NONSEQ ;
            s_ex_mem_size = CP_AHB_SIZE_8;
            break;
        case MEM_LHU:
            op_rw = CP_AHB_READ;
            op_type = CP_AHB_NONSEQ;
            s_ex_mem_size = CP_AHB_SIZE_16;
            break;
        case MEM_SB:
            op_rw = CP_AHB_WRITE;
            op_type =  CP_AHB_NONSEQ;
            s_ex_mem_size = CP_AHB_SIZE_8;
            break;
        case MEM_SH:
            op_rw = CP_AHB_WRITE;
            op_type =  CP_AHB_NONSEQ ;
            s_ex_mem_size = CP_AHB_SIZE_16;
            break;
        case MEM_SW:
            op_rw = CP_AHB_WRITE;
            op_type =  CP_AHB_NONSEQ;
            s_ex_mem_size = CP_AHB_SIZE_32;
            break;
        default:
            op_rw = DONT_CARE;
            op_type = CP_AHB_IDLE;
            s_ex_mem_size = 0;
            break;
       };

        ldst.transport(CP_PHS_ADDRESS, op_type, op_rw, s_ex_alu_result, s_ex_mem_size);
        s_ex_encoded_data = ldst.encode_data(s_ex_fwd2_val, s_ex_alu_result, s_ex_mem_size);
    };
};


event ex_output : pipeline(pipe.EXMEM)
{
    semantics
    {
        // Store the ALU result to the EXMEM pipeline register
        // Use the pipeline register that you created earlier in Assignment 5 to pass the output
        // signal from the ALU switch statement from the alu_operate event

        r_exmem_alu_result = s_ex_target_result;       
        r_exmem_target_address = s_ex_target_address;
        r_exmem_zero = s_ex_zero;
        r_exmem_brnchop = r_idex_brnchop;
        
        r_exmem_encoded_data = s_ex_encoded_data;
        r_exmem_mem_size = s_ex_mem_size;

        // Passing control signals to the next stage, MEM, through the EXMEM pipeline register.  These
        // instruction decoder signals are being passed from the IDEX pipeline to the EXMEM pipeline.
        //
        // Assign the proper IDEX pipeline register to the following EXMEM pipeline registers.
        r_exmem_rd             =  r_idex_rd;
        r_exmem_regwrite       =  r_idex_regwrite;

        // Passing Decoder control-signals to the EX stage
        r_exmem_branch_inst = r_idex_branch_inst;
        r_exmem_jump_inst = r_idex_jump_inst;
        r_exmem_mem_ops = r_idex_mem_ops;
        r_exmem_memread = r_idex_memread;
    };
};