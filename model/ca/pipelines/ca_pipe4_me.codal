/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe4_me.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "config.hcodal"

// -------------------------------------------------------------------------------------------------
// Memory Stage
// -------------------------------------------------------------------------------------------------
event me : pipeline(pipe.MEMWB)
{
    use branch_logic;
    use me_output;

    semantics
    {
        uint1 data_ready;
        uint1 data_response;
        uint32 decoded_data;
        uint32 data_signal;

        // Update the pipeline registers between the Memory (MEM) and Write Back (WB) stages
        if (r_exmem_jump_inst || r_exmem_branch_inst){
            branch_logic();
        }

        ldst.transport(CP_PHS_DATA, data_ready, data_response, data_signal, r_exmem_encoded_data);
        decoded_data = ldst.decode_data(data_signal, r_exmem_alu_result, r_exmem_mem_size);

        switch(r_exmem_mem_ops){
            case MEM_LB:
                s_me_mem_result = (int32)(int8)decoded_data;
            break;
            case MEM_LH:
                s_me_mem_result = (int32)(int16)decoded_data;
                break;
            case MEM_LW:
                s_me_mem_result = (int32)decoded_data;
                break;
            case MEM_LBU:
                s_me_mem_result = (int32)(uint8)decoded_data;
                break;
            case MEM_LHU:
                s_me_mem_result = (int32)(uint16)decoded_data;
                break;
            default:
                s_me_mem_result = 0;
            break;
        }

        s_me_stall = (!data_ready && !data_response) ? 1 : 0;


        me_output();
    };
};


event me_output : pipeline(pipe.MEMWB)
{
    semantics
    {
        // ALU result from the EXMEM pipeline register to pass along to the WB stage
        r_memwb_data_result = r_exmem_alu_result;
        r_memwb_mem_result = s_me_mem_result;
        r_memwb_memread = r_exmem_memread;

        // Passing control signals to the next stage, WB, through the MEMWB pipeline register

        r_memwb_rd          = r_exmem_rd;
        
        r_memwb_regwrite    = r_exmem_regwrite;
    };
};

event branch_logic : pipeline(pipe.MEMWB)
{
     semantics
    {
        switch(r_exmem_brnchop){

            case BRANCH_COND_TRUE:
                s_me_take_branch = r_exmem_zero;
                break;

            case BRANCH_COND_FALSE:
                s_me_take_branch = ~r_exmem_zero;
                break;

            case BRANCH_TRUE:
                s_me_take_branch = true;
                break;

            case BRANCH_FALSE:
                s_me_take_branch = false;
                break;

            default:
                s_me_take_branch = false;
                break;
        }

    };
    
};